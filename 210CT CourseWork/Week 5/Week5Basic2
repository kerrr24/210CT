import gc

class Node(object):
      def __init__(self, value):
          self.value=value
          self.next=None
          self.prev=None
 
class List(object):
      def __init__(self):
          self.head=None
          self.tail=None
      def insert(self,n,x):
          #Not actually perfect: how do we prepend to an existing list?
          if n!=None:
              x.next=n.next
              n.next=x
              x.prev=n
              if x.next!=None:
                  x.next.prev=x              
          if self.head==None:
              self.head=self.tail=x
              x.prev=x.next=None
          elif self.tail==n:
              self.tail=x
      def display(self):
          values=[]
          n=self.head
          while n!=None:
              values.append(str(n.value))
            
              n=n.next
          print ("List: ",",".join(values))
          
      def delete(self, toDelete):

        #locationtoDel = values.index[valueToDe]
        #print(locationtoDel)
       
        if self.head == None or toDelete == None:
            print("Object is null")
            return


        if toDelete.prev != None:
            toDelete.prev.next = toDelete.next
            print("1..")

        else:
            self.head = toDelete.next

        if toDelete.next != None:
            toDelete.next.prev = toDelete.prev
            print("2..")

        else:
            self.tail = toDelete.prev
                          
        gc.collect()
              

          
         
if __name__ == '__main__':
      l=List()
      l.insert(None, Node(4))
      l.insert(l.head,Node(6))
      l.insert(l.head,Node(8))
      l.insert(l.head,Node(3))
      l.insert(l.head,Node(12))
      l.display()
      l.delete(l.head.next)
      l.display()

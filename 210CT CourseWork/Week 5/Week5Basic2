################################################################################
#This block of code is the Python code provided in class as a starting point 
class Node(object):
      def __init__(self, value):
          self.value=value
          self.next=None
          self.prev=None
 
class List(object):
      def __init__(self):
          self.head=None
          self.tail=None
      def insert(self,n,x):
          #Not actually perfect: how do we prepend to an existing list?
          if n!=None:
              x.next=n.next
              n.next=x
              x.prev=n
              if x.next!=None:
                  x.next.prev=x              
          if self.head==None:
              self.head=self.tail=x
              x.prev=x.next=None
          elif self.tail==n:
              self.tail=x
      def display(self):
          values=[]
          n=self.head
          while n!=None:
              values.append(str(n.value))
            
              n=n.next
          print ("List: ",",".join(values))

###############################################################################
#My editted code
      def delete(self, toDelete):

        if toDelete.prev != None:
            toDelete.prev.next = toDelete.next #sets the link to the element being removed to the next element of the removed element
            print("1..")

        else:
            self.head = toDelete.next #if it is the head of the linked list being remove then this sets the head to the deleted elements next element

        if toDelete.next != None:
            toDelete.next.prev = toDelete.prev #sets the link from the element being removed to the previous element of the removed element
            print("2..")

        else:
            self.tail = toDelete.prev #if it is the tail value then sets the removed element's previous element to the tail

        l.display()
                      
###############################################################################
if __name__ == '__main__':
      l=List()
      l.insert(None, Node(4))
      l.insert(l.head,Node(6))
      l.insert(l.head,Node(8))
      l.insert(l.head,Node(3))
      l.insert(l.head,Node(12))
      l.display()
      l.delete(l.tail.prev.prev)
